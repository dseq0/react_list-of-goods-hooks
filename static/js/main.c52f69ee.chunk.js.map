{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","DEFAULT","sortGoods","setSortGoods","reverse","setReverse","visibleGoods","useMemo","goods","preparedGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,gBAAAA,E,YAAAA,M,KAWL,IA4BaE,EAAgB,WAC3B,MAAkCC,mBAASH,EAAOI,SAAlD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAEMC,EAAeC,mBAAQ,kBAhCN,SACvBC,EADuB,GAGnB,IADFN,EACC,EADDA,UAAWE,EACV,EADUA,QAEPK,EAAuB,YAAOD,GAqBpC,OAnBIN,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKL,EAAOgB,SACV,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAAOkB,OACV,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXZ,GACFK,EAAcL,UAGTK,EAO4BQ,CAAiBnB,EAAiB,CACnEI,YACAE,cACE,CAACF,EAAWE,IAOhB,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYlB,IAAcL,EAAOgB,WAEnCQ,QAAS,kBAAMlB,EAAaN,EAAOgB,WALrC,iCAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYlB,IAAcL,EAAOkB,SAEnCM,QAAS,kBAAMlB,EAAaN,EAAOkB,SALrC,4BAUA,wBACEI,KAAK,SACLD,UAAWE,IAAG,qBAAsB,CAClC,YAAahB,IAEfiB,QAAS,kBAAMhB,GAAYD,IAL7B,sBAUEF,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAU,4BACVG,QA1CU,WAClBlB,EAAaN,EAAOI,SACpBI,GAAW,IAqCL,sBAUJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCpHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c52f69ee.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\n\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortBy {\n  ALPHABET = 'alphabet',\n  LENGTH = 'length',\n  DEFAULT = '',\n}\n\ntype GoodsType = {\n  sortGoods: SortBy;\n  reverse: boolean;\n};\n\nconst getPreparedGoods = (\n  goods: string[],\n  { sortGoods, reverse }: GoodsType,\n) => {\n  const preparedGoods: string[] = [...goods];\n\n  if (sortGoods) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortGoods) {\n        case SortBy.ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SortBy.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App: React.FC = () => {\n  const [sortGoods, setSortGoods] = useState(SortBy.DEFAULT);\n  const [reverse, setReverse] = useState(false);\n\n  const visibleGoods = useMemo(() => getPreparedGoods(goodsFromServer, {\n    sortGoods,\n    reverse,\n  }), [sortGoods, reverse]);\n\n  const cancelReset = () => {\n    setSortGoods(SortBy.DEFAULT);\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortGoods !== SortBy.ALPHABET,\n          })}\n          onClick={() => setSortGoods(SortBy.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortGoods !== SortBy.LENGTH,\n          })}\n          onClick={() => setSortGoods(SortBy.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning ', {\n            'is-light': !reverse,\n          })}\n          onClick={() => setReverse(!reverse)}\n        >\n          Reverse\n        </button>\n\n        {(sortGoods || reverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={cancelReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}